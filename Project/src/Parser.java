/* Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;
import java.io.FileNotFoundException;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();static java.util.Stack argStack;
        public static void main(String[] args) throws ParseException{
                argStack = new java.util.Stack();

                File filename = new File(args[0]);
                try {
                        Parser parser = new Parser(new FileInputStream(filename));
                        SimpleNode root = parser.Module();

                        root.dump("");

                        SymbolTable symbolTable = new SymbolTable();

                        symbolTable.fillSymbols(root, "");

                        symbolTable.analyseCalls();


                } catch(FileNotFoundException e) {
                        System.out.println("Exception found");
                }

        }

// MAIN BLOCKS OF INFORMATION

/**
 * Main Module
*/
  static final public SimpleNode Module() throws ParseException {/*@bgen(jjtree) Module */
                      ASTModule jjtn000 = new ASTModule(JJTMODULE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token moduleName;
    try {
      try {
        jj_consume_token(MODULE);
        moduleName = jj_consume_token(ID);
jjtn000.name = moduleName.image;
        jj_consume_token(LCHAVETA);
      } catch (ParseException e) {
System.out.println("Error on module start, with Exception thrown " + e.toString());
                Token t = getToken(0);
                try {
                        if (t.kind == LCHAVETA)
                                getNextToken();
                        else
                                error_skipto(PVIRG);
                } catch (ParseException e2) {
                        System.out.println("Error on module");
                }
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Declaration();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        Function();
      }
      try {
        jj_consume_token(RCHAVETA);
{if ("" != null) return jjtn000;}
      } catch (ParseException e) {
System.out.println("Error on module end, with Exception thrown " + e.toString());
                {if ("" != null) return jjtn000;}
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
}

/**
 * Function, where the file's statement list lies.
*/
  static final public void Function() throws ParseException {/*@bgen(jjtree) Function */
                  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token name;
    try {
      try {
        jj_consume_token(FUNCTION);
        name = jj_consume_token(ID);
jjtn000.functionName = name.image;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGN:
        case 32:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 32:{
            ArrayElement(name);
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            ;
          }
          jj_consume_token(ASSIGN);
          name = jj_consume_token(ID);
jjtn000.functionName = name.image;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        VarList();
      } catch (ParseException e) {
System.out.println("Error on function statement, with Exception thrown " + e.toString());
                try {
                        error_skipto(PVIRG);
                } catch (ParseException e2) {
                        System.out.println("Error on function");
                }
      }
      Stmtlst();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

/**
 * Declaration, handling definitions and assignment of variables outside functions.
*/
  static final public void Declaration() throws ParseException {/*@bgen(jjtree) Declaration */
                     ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);String declaration; Token tmp;
    try {
      try {
        tmp = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 32:{
          ArrayElement(tmp);
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGN:{
          jj_consume_token(ASSIGN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 32:{
            jj_consume_token(32);
            ArraySize();
            jj_consume_token(33);
            break;
            }
          case ADDSUB_OP:
          case INTEGER:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ADDSUB_OP:{
              jj_consume_token(ADDSUB_OP);
              break;
              }
            default:
              jj_la1[5] = jj_gen;
              ;
            }
            jj_consume_token(INTEGER);
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(PVIRG);
      } catch (ParseException e) {
System.out.println("Error on declaration, with Exception thrown " + e.toString());

                error_skipto(PVIRG);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

/**
 * VarList, the set of variables of a specific function.
*/
  static final public void VarList() throws ParseException {/*@bgen(jjtree) VarList */
                 ASTVarList jjtn000 = new ASTVarList(JJTVARLIST);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);String variables; Token tmp;
    try {
      try {
        jj_consume_token(LPAR);
      } catch (ParseException e) {
System.out.println("Error on argument list, no opening parenthesis.");
                System.out.println("Specific Exception thrown:" + e.toString());
      }
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          Var();
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case VIRG:{
              ;
              break;
              }
            default:
              jj_la1[8] = jj_gen;
              break label_3;
            }
            jj_consume_token(VIRG);
            Var();
          }
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
      } catch (ParseException e) {
System.out.println("Error on argument list variables or closing parenthesis.");
                System.out.println("Specific Exception thrown: "+ e.toString());


                error_skipto_unless(PVIRG, RPAR);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

/**
 * StmtList, the set of all statements inside a function. Opening and 
 * closing brackets are inside this list, to better detect and isolate 
 * exceptions thrown.
*/
  static final public void Stmtlst() throws ParseException {
    try {
      jj_consume_token(LCHAVETA);
    } catch (ParseException e) {
System.out.println("Error on statement list, opening bracket not detected."
                        +"\nSpecific exception: " + e.toString());
                error_skipto_withoutconsuming(ID);
                {if ("" != null) return;}
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHILE:
      case IF:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      Stmt();
    }
    try {
      jj_consume_token(RCHAVETA);
    } catch (ParseException e) {
System.out.println("Error on statement list, closing bracket not detected."
                        +"\nSpecific exception: " + e.toString());
                error_skipto(ID);
    }
}

// STATEMENT INFORMATION

/**
 * Statement, the main code unit inside a function. It includes the assign
 * of variables, the call of functions, if/else blocks and while loops.
*/
  static final public void Stmt() throws ParseException {Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHILE:{
        While();
        break;
        }
      case IF:{
        If();
        Else();
        break;
        }
      case ID:{
        t = jj_consume_token(ID);
        if (jj_2_1(2)) {
          Call(t);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ASSIGN:
          case DOT:
          case 32:{
            Assign(t);
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(PVIRG);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.out.println("Error on a statement, maybe missing ';'\nSpecific Exception thrown: ."
                + e.toString());
                error_skipto(PVIRG);
    }
}

/**
 * Call, where a method is invoked.
 * @param Token t contains ID information for printing.
*/
  static final public void Call(Token t) throws ParseException {/*@bgen(jjtree) Call */
                     ASTCall jjtn000 = new ASTCall(JJTCALL);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);String string; Token tmp;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:{
          jj_consume_token(DOT);
          tmp = jj_consume_token(ID);
jjtn000.calledFunction = tmp.image;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(LPAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER:
        case ID:
        case STRING:{
          ArgumentList();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
      } catch (ParseException e) {
System.out.println("Error on call."
                        +"\nSpecific exception: " + e.toString());
                error_skipto_unless(PVIRG, LCHAVETA);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

/**
 * Assign to handle all the assignment of variables, be they scalar or arrays.
 * @param Token t contains ID information for printing.
*/
  static final public void Assign(Token t) throws ParseException {/*@bgen(jjtree) Assign */
                       ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);String string;
    try {
      try {
        LhsNoID(t);
        jj_consume_token(ASSIGN);
        Rhs();
      } catch (ParseException e) {
System.out.println("Error on assign."
                        +"\nSpecific exception: " + e.toString());

                error_skipto(PVIRG);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

/**
 * While loop.
*/
  static final public void While() throws ParseException {/*@bgen(jjtree) While */
               ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t; String tmp;
    try {
      try {
        jj_consume_token(WHILE);
        Exprtest();
        Stmtlst();
      } catch (ParseException e) {
System.out.println("Error on while");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

/**
 * If block.
*/
  static final public void If() throws ParseException {/*@bgen(jjtree) If */
             ASTIf jjtn000 = new ASTIf(JJTIF);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);String tmp;
    try {
      try {
        jj_consume_token(IF);
        Exprtest();
        Stmtlst();
      } catch (ParseException e) {
System.out.println("Error on if");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

/**
 * Else block, may or may not exist after if block.
*/
  static final public void Else() throws ParseException {/*@bgen(jjtree) Else */
  ASTElse jjtn000 = new ASTElse(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:{
          jj_consume_token(ELSE);
          Stmtlst();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          ;
        }
      } catch (ParseException e) {
System.out.println("Error on else");
                error_skipto(PVIRG);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

/**
 * Lhs, the left side of a two-sided operation, such as a comparison or assigment.
 * @return String containing information of lhs block.
*/
  static final public void Lhs() throws ParseException {Token t;
    t = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 32:{
      ArrayAccess(t);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ScalarAccess(t);
    }
}

/**
 * LhsNoID, particular use of Lhs, specific for a function to remove ambiguity 
 * while maintaining readability.
 * @return String containing information of lhs block, excluding <ID>.
*/
  static final public void LhsNoID(Token t) throws ParseException {String tmp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 32:{
      ArrayAccess(t);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ScalarAccess(t);
    }
}

/**
 * Rhs, the right side of a two-sided operation, such as a comparison or assigment.
 * @return String containing information of right block.
*/
  static final public void Rhs() throws ParseException {Token t; String tmp;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADDSUB_OP:
      case INTEGER:
      case ID:{
        Term();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ADDSUB_OP:
        case ARITH_OP:
        case BITWISE_OP:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ARITH_OP:{
            t = jj_consume_token(ARITH_OP);
            break;
            }
          case BITWISE_OP:{
            t = jj_consume_token(BITWISE_OP);
            break;
            }
          case ADDSUB_OP:{
            t = jj_consume_token(ADDSUB_OP);
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Term();
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        break;
        }
      case 32:{
        ArrayInstantion();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.out.println("Error on rhs.\nSpecific Exception thrown: " + e.toString());
                error_skipto_withoutconsuming(PVIRG);
    }
}

/**
 * Term, a subset of a Rhs.
*/
  static final public void Term() throws ParseException {/*@bgen(jjtree) Term */
              ASTTerm jjtn000 = new ASTTerm(JJTTERM);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ADDSUB_OP:{
          t = jj_consume_token(ADDSUB_OP);
jjtn000.operator=t.image;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER:{
          t = jj_consume_token(INTEGER);
jjtn000.termContent = t.image;
          break;
          }
        case ID:{
          t = jj_consume_token(ID);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 32:{
            ArrayAccess(t);
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            if (jj_2_2(2)) {
              Call(t);
            } else {
              ScalarAccess(t);
            }
          }
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
System.out.println("Error on term.\nSpecific Exception: " + e.toString());
                error_skipto_withoutconsuming(PVIRG);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

/**
 * Exprtest, handles the small comparison block, present in the while and if blocks.
 * @return String containing information of right block.
*/
  static final public void Exprtest() throws ParseException {/*@bgen(jjtree) Exprtest */
                  ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        jj_consume_token(LPAR);
        Lhs();
      } catch (ParseException e) {
System.out.println("Invalid opening condition for structure. \nSpecific Exception thrown: "
                 + e.toString());
                error_skipto_withoutconsuming(RELA_OP);
      }
      try {
        t = jj_consume_token(RELA_OP);
jjtn000.relOp = t.image;
        Rhs();
        jj_consume_token(RPAR);
      } catch (ParseException e) {
System.out.println("Invalid comparison operation or ending condition for structure");
                System.out.println("Specific exception thrown: " + e.toString());

                error_skipto_unless(PVIRG, RPAR);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

// ARGUMENTS

/**
 * Argument List, storing the information of the arguments passed inside a call, for example.
*/
  static final public void ArgumentList() throws ParseException {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        Argument();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VIRG:{
            ;
            break;
            }
          default:
            jj_la1[24] = jj_gen;
            break label_5;
          }
          jj_consume_token(VIRG);
          Argument();
        }
      } catch (ParseException e) {
System.out.println("Invalid argument. \nSpecific Exception thrown: " + e.toString());
                error_skipto(RPAR);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

/**
 * Argument, could be an ID, String or integer. 
 * @return String containing information of argument.
*/
  static final public void Argument() throws ParseException {/*@bgen(jjtree) Argument */
                   ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        t = jj_consume_token(ID);
        break;
        }
      case STRING:{
        t = jj_consume_token(STRING);
        break;
        }
      case INTEGER:{
        t = jj_consume_token(INTEGER);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
jjtn000.content = t.image;
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
}

// ACCESS

/**
 * Array Size. Contains the information of the size of an array
 * @return String with the information of the array size.
*/
  static final public void ArraySize() throws ParseException {Token tmp; Token tmp2;
    tmp = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      tmp2 = jj_consume_token(INTEGER);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ScalarAccess(tmp);
    }
}

/**
 * Array Access, accessing information of an array.
 * @return String containing information of array access, specifically the index..
*/
  static final public void ArrayAccess(Token content) throws ParseException {/*@bgen(jjtree) ArrayAccess */
                                    ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);String index;
    try {
      jj_consume_token(32);
      index = Index();
      jj_consume_token(33);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.content = content.image;
                jjtn000.index = index;
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void ArrayInstantion() throws ParseException {/*@bgen(jjtree) ArrayInstantion */
                          ASTArrayInstantion jjtn000 = new ASTArrayInstantion(JJTARRAYINSTANTION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);String size;
    try {
      jj_consume_token(32);
      size = Index();
      jj_consume_token(33);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.size = size;
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

/**
 * Scalar Access.
 * @return String containing information of size, or nothing if no '.' is found.
*/
  static final public void ScalarAccess(Token content) throws ParseException {/*@bgen(jjtree) ScalarAccess */
                                     ASTScalarAccess jjtn000 = new ASTScalarAccess(JJTSCALARACCESS);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);Token size;
    try {
jjtn000.content = content.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        size = jj_consume_token(SIZE);
jjtn000.size = size.image;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

/**
 * Index of an array.
 * @return String with index.
*/
  static final public String Index() throws ParseException {Token value;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      value = jj_consume_token(ID);
      break;
      }
    case INTEGER:{
      value = jj_consume_token(INTEGER);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return value.image;}
    throw new Error("Missing return statement in function");
}

  static final public void Var() throws ParseException {/*@bgen(jjtree) Var */
              ASTVar jjtn000 = new ASTVar(JJTVAR);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t; String tmp;
    try {
      t = jj_consume_token(ID);
jjtn000.content = t.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 32:{
        ArrayElement(t);
jjtn000.content = null;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

/**
 * Array Element, checks to see if the element is correctly formatted, important for
 * error recovery.
*/
  static final public String ArrayElement(Token t) throws ParseException {/*@bgen(jjtree) ArrayElement */
  ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(32);
      jj_consume_token(33);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.content = t.image; {if ("" != null) return t.image;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
}

  static void error_skipto(int kind) throws ParseException {/*@bgen(jjtree) error_skipto */
ASTerror_skipto jjtn000 = new ASTerror_skipto(JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  static void error_skipto_unless(int kind, int stopKind) throws ParseException {/*@bgen(jjtree) error_skipto_unless */
ASTerror_skipto_unless jjtn000 = new ASTerror_skipto_unless(JJTERROR_SKIPTO_UNLESS);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind && t.kind != stopKind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  static void error_skipto_withoutconsuming(int kind) throws ParseException {/*@bgen(jjtree) error_skipto_withoutconsuming */
ASTerror_skipto_withoutconsuming jjtn000 = new ASTerror_skipto_withoutconsuming(JJTERROR_SKIPTO_WITHOUTCONSUMING);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {Token t;

  boolean hasReached = false;
  while (!hasReached) {
        t = getToken(1);
        if (t.kind == kind)
                hasReached = true;
        else
                getNextToken();
  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_9()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_7()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) jj_scanpos = xsp;
    if (jj_scan_token(LPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3R_8()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_8()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x10000000,0x1000000,0x0,0x8000,0x0,0x100,0x8000100,0x8000,0x80000,0x10000000,0x10003000,0x208000,0x10003000,0x200000,0x98000000,0x4000,0x0,0x0,0x700,0x700,0x18000100,0x100,0x0,0x18000000,0x80000,0x98000000,0x8000000,0x200000,0x18000000,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[34];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 30; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 34; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
