options {
	LOOKAHEAD=1; //melhorar para 1
}
 
PARSER_BEGIN(Parser)

/*import java.io.BufferedReader;
import java.io.InputStreamReader; */
import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;
import java.io.FileNotFoundException;

public class Parser {
	static java.util.Stack argStack;
	public static void main(String[] args) throws ParseException{

		argStack = new java.util.Stack(); 

		File filename = new File(args[0]);
	  	try { 
			Parser parser = new Parser(new FileInputStream(filename));
			SimpleNode root = parser.Module();
			root.dump("");
		} catch(FileNotFoundException e) {
			System.out.println("Exception found");
		}
		
	}
}

PARSER_END(Parser)

SKIP : {
	" "	| "\t"	| "\n" | "\r" | 
	<"//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")> | 
	<"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/"> 
}

/* Reserved words */
TOKEN: {
	<RELA_OP : ">" | "<" | "<=" | ">=" | "==" | "!=" >
	| <ADDSUB_OP: "+" | "-">
	| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>" >
	| <BITWISE_OP: "&" | "|" | "^" >
	| <NOT_OP: "!" >
	| <WHILE: "while">
	| <IF: "if" >
	| <ELSE: "else">
	| <ASSIGN: "=">
	| <ASPA: "\"">
	| <LPAR: "(" >
	| <RPAR: ")" >
	| <VIRG: "," >
	| <PVIRG: ";" >
	| <DOT: "." > //Ã© para por isto?
	| <LCHAVETA: "{" >
	| <RCHAVETA: "}" >
	| <FUNCTION: "function" >
	| <MODULE: "module" >
	| <SIZE: "size">
}

TOKEN: {
	<INTEGER: (<DIGIT>)+>
	| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
	| <#LETTER: ["$", "A"-"Z","_","a"-"z"]>
	| <#DIGIT: ["0"-"9"]>
	| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

SimpleNode Module(): {} {
	try {
		<MODULE> <ID> <LCHAVETA>
	} catch (ParseException e) {
		System.out.println("Error on module start, with Exception thrown " + e.toString());
		Token t = getToken(0);
		if (t.kind == LCHAVETA) 
			getNextToken();
		else
			error_skipto(PVIRG);
	}
	
	(Function() |
	Declaration())*
		
	try {
		< RCHAVETA > { return jjtThis; }
	} catch (ParseException e) {
		System.out.println("Error on module end, with Exception thrown " + e.toString());
		return jjtThis;	
	}
}

void Declaration(): {} {
	try {	
		<ID> (ArrayElement())?
		(< ASSIGN > (("[" ArraySize() "]") | (< ADDSUB_OP >)? < INTEGER >))? < PVIRG >
	}
	catch(ParseException e) {
		System.out.println("Error on declaration, with Exception thrown " + e.toString());
		error_skipto(PVIRG);
	}
}

void Function(): {} {
	try {
	 	<FUNCTION>  <ID> (
	     	((ArrayElement())? <ASSIGN> <ID>)?
		     (VarList()) 
		)
			
	} catch(ParseException e) {
		System.out.println("Error on function statement, with Exception thrown " + e.toString());
		error_skipto(PVIRG);
	} 
	
	Stmtlst() 
}

void VarList(): { } {
	try {
		<LPAR>
	} catch (ParseException e) {
		System.out.println("Error on argument list, no opening parenthesis. \nSpecific Exception thrown: " + e.toString());
	}
	try {
	 	(<ID>(ArrayElement())?
		
		(
		< VIRG > <ID> (ArrayElement())?
		)*)?
	} catch (ParseException e) {
		System.out.println("Error on argument list variables. \nSpecific Exception thrown: " + e.toString());
	}
	try {
		<RPAR>
	} catch (ParseException e) {
		System.out.println("Error on argument list, no closing parenthesis. \nSpecific Exception thrown: " + e.toString());
		try {
			error_skipto(RPAR);
		}
		catch (ParseException e2) {
			System.out.println("Skipping to the next line");
			error_skipto(PVIRG);
		}
	}	 
}

void ArrayElement(): { } {
	"[" "]"
}

void Stmtlst(): {} {
	try {
		<LCHAVETA>
	} 
	catch (ParseException e) {
		System.out.println("Error on statement list, opening bracket not detected."
			+"\nSpecific exception: " + e.toString());
	}

	(Stmt())* 
	
	try {
		<RCHAVETA>
	}	
	catch (ParseException e) {
		System.out.println("Error on statement list, closing bracket not detected."
			+"\nSpecific exception: " + e.toString());
		error_skipto(ID);
	}
}

void Stmt(): {} {
	try {
		While() | If() | (<ID> (LOOKAHEAD(2) Call() | Assign())) < PVIRG >
	} catch (ParseException e) {
		System.out.println("Error on a statement, maybe missing ';'\nSpecific Exception thrown: ." + e.toString());
		error_skipto(PVIRG);
	}
}

void Call(): { } {
	try {
		( < DOT > <ID >)? < LPAR > (ArgumentList() )? < RPAR >
	}
	catch (ParseException e) {
		System.out.println("Error on call."
			+"\nSpecific exception: " + e.toString());
		
		error_skipto(PVIRG);
	}
}

void Assign(): { } {
	try {
		LhsNoID() <ASSIGN> Rhs()
	} catch (ParseException e) {
		System.out.println("Error on assign."
			+"\nSpecific exception: " + e.toString());
		
		error_skipto(PVIRG);
	}
}

void Lhs(): {} {
	<ID>  (ArrayAccess() | ScalarAccess())
}

void LhsNoID(): {} {
	(ArrayAccess() | ScalarAccess())
}

void Rhs(): { } {
	try {
	(
	Term() ((< ARITH_OP > | < BITWISE_OP > | < ADDSUB_OP >) Term())?
	) | "[" ArraySize() "]"
	}
	catch (ParseException e) {
		System.out.println("Error on rhs.\nSpecific Exception thrown: " + e.toString());
	}
	
}

void ArraySize(): {Token t; } {
	((t=<ID> ScalarAccess()) | t=< INTEGER >) 
	{jjtThis.infoValue = t.image;}
}

void Term(): { } {
	try {
		( <ADDSUB_OP> )? 
		( <INTEGER> | ( <ID> ( ArrayAccess() | 
		(LOOKAHEAD(2) Call() | ScalarAccess() ))))
	}
	catch (ParseException e) {
		System.out.println("Error on term.\nSpecific Exception: " + e.toString());
		error_skipto(PVIRG);
	}
} 

void Exprtest(): { } {
	< LPAR > Lhs() 
	try {
		< RELA_OP > 
	}
	catch (ParseException e) {
		System.out.println("Invalid comparison operation for while. \nSpecific Exception thrown: " + e.toString());
		error_skipto(PVIRG);
	}
	try {
		Rhs() <RPAR>
	}
	catch (ParseException e) {
		System.out.println("Invalid ending condition for while. \nSpecific Exception thrown: " + e.toString());

		Token t = getToken(0);
		
		try {
			error_skipto(RPAR);
		} catch (ParseException e2) {
			System.out.println("Skipping to right pair.");
		}
	}
}

void While(): { } {
	try {
		< WHILE > Exprtest() Stmtlst() 
	} catch (ParseException e) {
		System.out.println("Error on while");
	}
}

void If(): { } {
	try {
		< IF > Exprtest() Stmtlst() 
	} catch (ParseException e) {
		System.out.println("Error on if");
	}

	try {
		(< ELSE > Stmtlst())?
	}
	catch (ParseException e) {
		System.out.println("Error on else");
		error_skipto(PVIRG);
	}
}

void ArgumentList(): { } {
	try {
	Argument() (< VIRG > Argument())*
	} catch (ParseException e) {
		System.out.println("Invalid argument. \nSpecific Exception thrown: " + e.toString());
		error_skipto(RPAR);
	}
}

void Argument(): { } {
	
	 < ID > | < STRING > | < INTEGER > 
	
}

void ArrayAccess(): { } {
	"[" Index() "]"
}

void ScalarAccess(): { } {
	(<DOT > < SIZE >)?
}

void Index(): {} {
	< ID > | < INTEGER >
}

JAVACODE
void error_skipto(int kind) {
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);
}



